#!/usr/bin/env node

/**
 * Invoke babel-register
 */
const path = require('path');
const env  = process.env.NODE_ENV || 'development';
const root = global['root'] = path.resolve(__dirname);
const esc  = require('escape-string-regexp');

global.babelPaths = [
  new RegExp(`${esc(path.resolve('src'))}`,'i'),
  new RegExp(`${esc(path.resolve('server-gql-endpoint.js'))}`, 'i'),
  new RegExp(`${esc(path.resolve('server.js'))}`, 'i')
];
require('babel-register')({ cache: true, only: global.babelPaths });

const CreateDeferred = ()=>{
  const deferred = {};
  
  deferred.promise = new Promise((resolve, reject) => {
    deferred.resolve = resolve;
    deferred.reject = reject;
  });
  
  return deferred;
}

/**
 * Module dependencies.
 */
const http       = require('http');
const fs         = require('fs');
const os         = require('os');
// const EzSpdy     = require('ez-spdy').EzSpdy;
const inProd     = /prod(uction)?/i.test(env);
const app        = require('./server')(root, inProd);
const httpServer = http.createServer(app);
const debug      = require('debug')('nyteshade.com:server');
const startup    = { normal: CreateDeferred() };
const ports      = {
  secure: process.env.SSL_PORT || (inProd ? 443 : 3443),
  normal: process.env.PORT || (inProd ? 80 : 3000)
};

/**
 * Store some useful values on the app for use elsewhere
 */
app.set('ports', ports);
app.set('root', root);
app.set('source', path.join(root, 'src'));
app.set('inProd', inProd);

/**
 * Create HTTP server.
 */
httpServer.listen(ports.normal);
httpServer.on('error', onError.bind(startup.normal));
httpServer.on('listening', onListening.bind(startup.normal));

/**
 * Start a HTTP/2 server if we have certs
 */
//startup.secure = EzSpdy(app, {debug: true, port: ports.secure});

Promise
  .all(Object.keys(startup).map(function(key) { return startup[key] }))
  .then(serverUp)
  .catch(error => onError.bind({}));

function onError(error) {
  this.reject(error);

  console.error('An error occurred! ', error.message, error.stack);

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  this.resolve(httpServer);
  var addr = httpServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function serverUp() {
  console.log('');
  console.log(`[Project Root] ${app.get('root')}`);
  if (httpServer)
    console.log(`[HTTP URL    ] http://${os.hostname()}:${ports.normal}`);
  console.log('')
}
